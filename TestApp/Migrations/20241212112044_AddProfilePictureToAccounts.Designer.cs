// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Context;

#nullable disable

namespace TestApp.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241212112044_AddProfilePictureToAccounts")]
    partial class AddProfilePictureToAccounts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursePrerequisite", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Prereq")
                        .HasColumnType("int");

                    b.HasKey("CourseID", "Prereq")
                        .HasName("PK__CoursePr__F8693C2CD1C66F08");

                    b.HasIndex("Prereq");

                    b.ToTable("CoursePrerequisite", (string)null);
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.Property<int>("GoalID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.HasKey("GoalID", "LearnerID")
                        .HasName("PK__Learners__3C3540FE93723620");

                    b.HasIndex("LearnerID");

                    b.ToTable("LearnersGoals", (string)null);
                });

            modelBuilder.Entity("ReceivedNotification", b =>
                {
                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID", "LearnerID")
                        .HasName("PK__Received__96B591FD05065B4E");

                    b.HasIndex("LearnerID");

                    b.ToTable("ReceivedNotification", (string)null);
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.HasKey("InstructorID", "CourseID")
                        .HasName("PK__Teaches__F193DC630634C454");

                    b.HasIndex("CourseID");

                    b.ToTable("Teaches", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementID"));

                    b.Property<int?>("BadgeID")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("achievement_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("achievement_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("date_earned")
                        .HasColumnType("date");

                    b.HasKey("AchievementID")
                        .HasName("PK__Achievem__276330E082B30C98");

                    b.HasIndex("BadgeID");

                    b.HasIndex("LearnerID");

                    b.ToTable("Achievement", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<string>("adminPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AdminID")
                        .HasName("PK__Admin__719FE4E817592A92");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Assessment", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("assessment_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("assessment_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("criteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("passing_marks")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("total_marks")
                        .HasColumnType("int");

                    b.Property<int?>("weightage")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK__Assessme__3214EC27508ED874");

                    b.HasIndex("ModuleID", "CourseID");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("TestApp.Models.Badge", b =>
                {
                    b.Property<int>("BadgeID")
                        .HasColumnType("int");

                    b.Property<string>("badge_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("criteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("points")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BadgeID")
                        .HasName("PK__Badge__1918237CFFDBF398");

                    b.ToTable("Badge", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Collaborative", b =>
                {
                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("deadline")
                        .HasColumnType("date");

                    b.Property<int?>("max_num_participants")
                        .HasColumnType("int");

                    b.HasKey("QuestID")
                        .HasName("PK__Collabor__B6619ACB14CD0D61");

                    b.ToTable("Collaborative", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.ContentLibrary", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("content_URL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("library_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("library_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("metadata")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID")
                        .HasName("PK__ContentL__3214EC27E90B6A35");

                    b.HasIndex("ModuleID", "CourseID");

                    b.ToTable("ContentLibrary", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("course_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("credit_points")
                        .HasColumnType("int");

                    b.Property<string>("difficulty_level")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("learning_objective")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CourseID")
                        .HasName("PK__Course__C92D7187EB6968B1");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Course_enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("completion_date")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("enrollment_date")
                        .HasColumnType("date");

                    b.Property<string>("enrollment_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EnrollmentID")
                        .HasName("PK__Course_e__7F6877FBDE714736");

                    b.HasIndex("CourseID");

                    b.HasIndex("LearnerID");

                    b.ToTable("Course_enrollment", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Discussion_forum", b =>
                {
                    b.Property<int>("forumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("forumID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("forum_description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("forum_timestamp")
                        .HasColumnType("datetime");

                    b.Property<TimeOnly?>("last_active")
                        .HasColumnType("time");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("forumID")
                        .HasName("PK__Discussi__BBA7A440C78DD2E8");

                    b.HasIndex("ModuleID", "CourseID");

                    b.ToTable("Discussion_forum", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Emotional_feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int?>("activityID")
                        .HasColumnType("int");

                    b.Property<string>("emotional_state")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("feedback_timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("FeedbackID")
                        .HasName("PK__Emotiona__6A4BEDF6D4219EB3");

                    b.HasIndex("LearnerID");

                    b.HasIndex("activityID");

                    b.ToTable("Emotional_feedback", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Emotionalfeedback_review", b =>
                {
                    b.Property<int>("FeedbackID")
                        .HasColumnType("int");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FeedbackID", "InstructorID")
                        .HasName("PK__Emotiona__C39BFD41543B8D51");

                    b.HasIndex("InstructorID");

                    b.ToTable("Emotionalfeedback_review", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.FilledSurvey", b =>
                {
                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SurveyID", "LearnerID")
                        .HasName("PK__FilledSu__1332A052D8F4C48A");

                    b.HasIndex("LearnerID");

                    b.ToTable("FilledSurvey", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.HealthCondition", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<string>("condition")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "ProfileID", "condition")
                        .HasName("PK__HealthCo__930320B0583C47B5");

                    b.ToTable("HealthCondition", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Instructor", b =>
                {
                    b.Property<int>("InstructorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructorID"));

                    b.Property<string>("adminPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("expertise_area")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("instructor_name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("latest_qualification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InstructorID")
                        .HasName("PK__Instruct__9D010B7BD46B0427");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Interaction_log", b =>
                {
                    b.Property<int>("LogID")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("action_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("activity_ID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("interaction_Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("LogID")
                        .HasName("PK__Interact__5E5499A818E6BADE");

                    b.HasIndex("LearnerID");

                    b.HasIndex("activity_ID");

                    b.ToTable("Interaction_log", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Leaderboard", b =>
                {
                    b.Property<int>("BoardID")
                        .HasColumnType("int");

                    b.Property<string>("season")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BoardID")
                        .HasName("PK__Leaderbo__F9646BD2DF1DBF14");

                    b.ToTable("Leaderboard", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Learner", b =>
                {
                    b.Property<int>("LearnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LearnerID"));

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("TestApp/wwwroot/default_pp.png");

                    b.Property<string>("adminPassword")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("birth_date")
                        .HasColumnType("date");

                    b.Property<string>("country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("cultural_background")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID")
                        .HasName("PK__Learner__67ABFCFA30E07985");

                    b.ToTable("Learner", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.LearnerDiscussion", b =>
                {
                    b.Property<int>("ForumID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("discussion_time")
                        .HasColumnType("datetime");

                    b.Property<string>("Post")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ForumID", "LearnerID", "discussion_time")
                        .HasName("PK__LearnerD__91B2B1CB756DD628");

                    b.HasIndex("LearnerID");

                    b.ToTable("LearnerDiscussion", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.LearnersCollaboration", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<string>("completion_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "QuestID")
                        .HasName("PK__Learners__CCCDE5568F60DBF8");

                    b.HasIndex("QuestID");

                    b.ToTable("LearnersCollaboration", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.LearnersMastery", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<string>("skill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("completion_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "QuestID", "skill")
                        .HasName("PK__Learners__36F2E773351E4BB2");

                    b.HasIndex("QuestID", "skill");

                    b.ToTable("LearnersMastery", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.LearningPreference", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("preference")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "preference")
                        .HasName("PK__Learning__6032E1580B26F4D5");

                    b.ToTable("LearningPreference", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Learning_activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"));

                    b.Property<int?>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("Max_points")
                        .HasColumnType("int");

                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("activity_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("instruction_details")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ActivityID")
                        .HasName("PK__Learning__45F4A7F1F2085D9E");

                    b.HasIndex("ModuleID", "CourseID");

                    b.ToTable("Learning_activities");
                });

            modelBuilder.Entity("TestApp.Models.Learning_goal", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("deadline")
                        .HasColumnType("date");

                    b.Property<string>("goal_description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("goal_status")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID")
                        .HasName("PK__Learning__3214EC270E57B92D");

                    b.ToTable("Learning_goal", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Learning_path", b =>
                {
                    b.Property<int>("pathID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pathID"));

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileID")
                        .HasColumnType("int");

                    b.Property<string>("adaptive_rules")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("completion_status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("custom_content")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("pathID")
                        .HasName("PK__Learning__BFB8200AE49E9D65");

                    b.HasIndex("LearnerID", "ProfileID");

                    b.ToTable("Learning_path", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("contentURL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("difficulty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleID", "CourseID")
                        .HasName("PK__Modules__47E6A09FE7B7A463");

                    b.HasIndex("CourseID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("TestApp.Models.ModuleContent", b =>
                {
                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("content_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleID", "CourseID", "content_type")
                        .HasName("PK__ModuleCo__402E75DAFC72DB74");

                    b.ToTable("ModuleContent", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Pathreview", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("PathID")
                        .HasColumnType("int");

                    b.Property<string>("review")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("InstructorID", "PathID")
                        .HasName("PK__Pathrevi__11D776B81C453A6B");

                    b.HasIndex("PathID");

                    b.ToTable("Pathreview", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.PersonalizationProfile", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileID"));

                    b.Property<string>("Prefered_content_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("emotional_state")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("personality_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "ProfileID")
                        .HasName("PK__Personal__353B34725964D150");

                    b.ToTable("PersonalizationProfiles");
                });

            modelBuilder.Entity("TestApp.Models.Quest", b =>
                {
                    b.Property<int>("QuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestID"));

                    b.Property<string>("criteria")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("difficulty_level")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("quest_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("QuestID")
                        .HasName("PK__Quest__B6619ACBC1E92C53");

                    b.ToTable("Quest", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.QuestReward", b =>
                {
                    b.Property<int>("RewardID")
                        .HasColumnType("int");

                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time_earned")
                        .HasColumnType("datetime");

                    b.HasKey("RewardID", "QuestID", "LearnerID")
                        .HasName("PK__QuestRew__D251A7C972BCA27D");

                    b.HasIndex("LearnerID");

                    b.HasIndex("QuestID");

                    b.ToTable("QuestReward", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Ranking", b =>
                {
                    b.Property<int>("BoardID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int?>("rankNum")
                        .HasColumnType("int");

                    b.Property<int?>("total_points")
                        .HasColumnType("int");

                    b.HasKey("BoardID", "LearnerID", "CourseID")
                        .HasName("PK__Ranking__C9D7F96C2F89C0EF");

                    b.HasIndex("CourseID");

                    b.HasIndex("LearnerID");

                    b.ToTable("Ranking", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Reward", b =>
                {
                    b.Property<int>("RewardID")
                        .HasColumnType("int");

                    b.Property<string>("reward_description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("reward_type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("reward_value")
                        .HasColumnType("int");

                    b.HasKey("RewardID")
                        .HasName("PK__Reward__82501599D00DD99F");

                    b.ToTable("Reward", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Skill", b =>
                {
                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("skill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LearnerID", "skill")
                        .HasName("PK__Skills__C45BDEA564F3721F");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("TestApp.Models.SkillProgression", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int?>("LearnerID")
                        .HasColumnType("int");

                    b.Property<string>("proficiency_level")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("skillProgression_timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("skill_name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID")
                        .HasName("PK__SkillPro__3214EC273F795C65");

                    b.HasIndex("LearnerID", "skill_name");

                    b.ToTable("SkillProgression", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Skill_Mastery", b =>
                {
                    b.Property<int>("QuestID")
                        .HasColumnType("int");

                    b.Property<string>("skill")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("QuestID", "skill")
                        .HasName("PK__Skill_Ma__1591B89457A623BE");

                    b.ToTable("Skill_Mastery", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Survey", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ID")
                        .HasName("PK__Survey__3214EC27B9CDD96C");

                    b.ToTable("Survey", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("SurveyID")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SurveyID", "Question")
                        .HasName("PK__SurveyQu__23FB983B1273A613");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("TestApp.Models.SystemNotification", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<bool?>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<string>("notification_message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("notification_timestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("urgency_level")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID")
                        .HasName("PK__SystemNo__3214EC27F00C9027");

                    b.ToTable("SystemNotification", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Takenassessment", b =>
                {
                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<int>("LearnerID")
                        .HasColumnType("int");

                    b.Property<int?>("scoredPoint")
                        .HasColumnType("int");

                    b.HasKey("AssessmentID", "LearnerID")
                        .HasName("PK__Takenass__8B5147F1302C63FB");

                    b.HasIndex("LearnerID");

                    b.ToTable("Takenassessment", (string)null);
                });

            modelBuilder.Entity("TestApp.Models.Target_trait", b =>
                {
                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Trait")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModuleID", "CourseID", "Trait")
                        .HasName("PK__Target_t__4E005E4CD2539EE0");

                    b.ToTable("Target_traits");
                });

            modelBuilder.Entity("CoursePrerequisite", b =>
                {
                    b.HasOne("TestApp.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CoursePre__Cours__35BCFE0A");

                    b.HasOne("TestApp.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("Prereq")
                        .IsRequired()
                        .HasConstraintName("FK__CoursePre__Prere__36B12243");
                });

            modelBuilder.Entity("LearnersGoal", b =>
                {
                    b.HasOne("TestApp.Models.Learning_goal", null)
                        .WithMany()
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__GoalI__73BA3083");

                    b.HasOne("TestApp.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersG__Learn__74AE54BC");
                });

            modelBuilder.Entity("ReceivedNotification", b =>
                {
                    b.HasOne("TestApp.Models.Learner", null)
                        .WithMany()
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReceivedN__Learn__02FC7413");

                    b.HasOne("TestApp.Models.SystemNotification", null)
                        .WithMany()
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ReceivedN__Notif__02084FDA");
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.HasOne("TestApp.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__CourseI__68487DD7");

                    b.HasOne("TestApp.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Teaches__Instruc__6754599E");
                });

            modelBuilder.Entity("TestApp.Models.Achievement", b =>
                {
                    b.HasOne("TestApp.Models.Badge", "Badge")
                        .WithMany("Achievements")
                        .HasForeignKey("BadgeID")
                        .HasConstraintName("FK__Achieveme__Badge__0B91BA14");

                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Achievements")
                        .HasForeignKey("LearnerID")
                        .HasConstraintName("FK__Achieveme__Learn__0A9D95DB");

                    b.Navigation("Badge");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.Assessment", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("Assessments")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Assessments__45F365D3");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Collaborative", b =>
                {
                    b.HasOne("TestApp.Models.Quest", "Quest")
                        .WithOne("Collaborative")
                        .HasForeignKey("TestApp.Models.Collaborative", "QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Collabora__Quest__151B244E");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("TestApp.Models.ContentLibrary", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("ContentLibraries")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__ContentLibrary__4316F928");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Course_enrollment", b =>
                {
                    b.HasOne("TestApp.Models.Course", "Course")
                        .WithMany("Course_enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Course_en__Cours__6383C8BA");

                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Course_enrollments")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Course_en__Learn__6477ECF3");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.Discussion_forum", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("Discussion_forums")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Discussion_forum__1F98B2C1");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Emotional_feedback", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Emotional_feedbacks")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Emotional__Learn__534D60F1");

                    b.HasOne("TestApp.Models.Learning_activity", "activity")
                        .WithMany("Emotional_feedbacks")
                        .HasForeignKey("activityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Emotional__activ__5441852A");

                    b.Navigation("Learner");

                    b.Navigation("activity");
                });

            modelBuilder.Entity("TestApp.Models.Emotionalfeedback_review", b =>
                {
                    b.HasOne("TestApp.Models.Emotional_feedback", "Feedback")
                        .WithMany("Emotionalfeedback_reviews")
                        .HasForeignKey("FeedbackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Feedb__5FB337D6");

                    b.HasOne("TestApp.Models.Instructor", "Instructor")
                        .WithMany("Emotionalfeedback_reviews")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Emotional__Instr__60A75C0F");

                    b.Navigation("Feedback");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("TestApp.Models.FilledSurvey", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FilledSur__Learn__7D439ABD");

                    b.HasOne("TestApp.Models.Survey", "Survey")
                        .WithMany("FilledSurveys")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__FilledSur__Surve__7C4F7684");

                    b.Navigation("Learner");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("TestApp.Models.HealthCondition", b =>
                {
                    b.HasOne("TestApp.Models.PersonalizationProfile", "PersonalizationProfile")
                        .WithMany("HealthConditions")
                        .HasForeignKey("LearnerID", "ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__HealthCondition__30F848ED");

                    b.Navigation("PersonalizationProfile");
                });

            modelBuilder.Entity("TestApp.Models.Interaction_log", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Interaction_logs")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Interacti__Learn__5070F446");

                    b.HasOne("TestApp.Models.Learning_activity", "activity")
                        .WithMany("Interaction_logs")
                        .HasForeignKey("activity_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Interacti__activ__4F7CD00D");

                    b.Navigation("Learner");

                    b.Navigation("activity");
                });

            modelBuilder.Entity("TestApp.Models.LearnerDiscussion", b =>
                {
                    b.HasOne("TestApp.Models.Discussion_forum", "Forum")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("ForumID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Forum__22751F6C");

                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("LearnerDiscussions")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnerDi__Learn__236943A5");

                    b.Navigation("Forum");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.LearnersCollaboration", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("LearnersCollaborations")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersC__Learn__17F790F9");

                    b.HasOne("TestApp.Models.Collaborative", "Quest")
                        .WithMany("LearnersCollaborations")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersC__Quest__18EBB532");

                    b.Navigation("Learner");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("TestApp.Models.LearnersMastery", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("LearnersMasteries")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersM__Learn__1BC821DD");

                    b.HasOne("TestApp.Models.Skill_Mastery", "Skill_Mastery")
                        .WithMany("LearnersMasteries")
                        .HasForeignKey("QuestID", "skill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearnersMastery__1CBC4616");

                    b.Navigation("Learner");

                    b.Navigation("Skill_Mastery");
                });

            modelBuilder.Entity("TestApp.Models.LearningPreference", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("LearningPreferences")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__LearningP__Learn__2B3F6F97");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.Learning_activity", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("Learning_activities")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Learning_activit__4CA06362");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Learning_path", b =>
                {
                    b.HasOne("TestApp.Models.PersonalizationProfile", "PersonalizationProfile")
                        .WithMany("Learning_paths")
                        .HasForeignKey("LearnerID", "ProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Learning_path__571DF1D5");

                    b.Navigation("PersonalizationProfile");
                });

            modelBuilder.Entity("TestApp.Models.Module", b =>
                {
                    b.HasOne("TestApp.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Modules__CourseI__3A81B327");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("TestApp.Models.ModuleContent", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("ModuleContents")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ModuleContent__403A8C7D");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Pathreview", b =>
                {
                    b.HasOne("TestApp.Models.Instructor", "Instructor")
                        .WithMany("Pathreviews")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Pathrevie__Instr__5BE2A6F2");

                    b.HasOne("TestApp.Models.Learning_path", "Path")
                        .WithMany("Pathreviews")
                        .HasForeignKey("PathID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Pathrevie__PathI__5CD6CB2B");

                    b.Navigation("Instructor");

                    b.Navigation("Path");
                });

            modelBuilder.Entity("TestApp.Models.PersonalizationProfile", b =>
                {
                    b.HasOne("TestApp.Models.Learner", null)
                        .WithMany("PersonalizationProfiles")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TestApp.Models.QuestReward", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("QuestRewards")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Learn__282DF8C2");

                    b.HasOne("TestApp.Models.Quest", "Quest")
                        .WithMany("QuestRewards")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Quest__2739D489");

                    b.HasOne("TestApp.Models.Reward", "Reward")
                        .WithMany("QuestRewards")
                        .HasForeignKey("RewardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__QuestRewa__Rewar__2645B050");

                    b.Navigation("Learner");

                    b.Navigation("Quest");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("TestApp.Models.Ranking", b =>
                {
                    b.HasOne("TestApp.Models.Leaderboard", "Board")
                        .WithMany("Rankings")
                        .HasForeignKey("BoardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__BoardID__6D0D32F4");

                    b.HasOne("TestApp.Models.Course", "Course")
                        .WithMany("Rankings")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__CourseI__6EF57B66");

                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Rankings")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Ranking__Learner__6E01572D");

                    b.Navigation("Board");

                    b.Navigation("Course");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.Skill", b =>
                {
                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Skills")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Skills__LearnerI__286302EC");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.SkillProgression", b =>
                {
                    b.HasOne("TestApp.Models.Skill", "Skill")
                        .WithMany("SkillProgressions")
                        .HasForeignKey("LearnerID", "skill_name")
                        .HasConstraintName("FK__SkillProgression__07C12930");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("TestApp.Models.Skill_Mastery", b =>
                {
                    b.HasOne("TestApp.Models.Quest", "Quest")
                        .WithMany("Skill_Masteries")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Skill_Mas__Quest__123EB7A3");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("TestApp.Models.SurveyQuestion", b =>
                {
                    b.HasOne("TestApp.Models.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__SurveyQue__Surve__797309D9");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("TestApp.Models.Takenassessment", b =>
                {
                    b.HasOne("TestApp.Models.Assessment", "Assessment")
                        .WithMany("Takenassessments")
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Takenasse__Asses__49C3F6B7");

                    b.HasOne("TestApp.Models.Learner", "Learner")
                        .WithMany("Takenassessments")
                        .HasForeignKey("LearnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Takenasse__Learn__48CFD27E");

                    b.Navigation("Assessment");

                    b.Navigation("Learner");
                });

            modelBuilder.Entity("TestApp.Models.Target_trait", b =>
                {
                    b.HasOne("TestApp.Models.Module", "Module")
                        .WithMany("Target_traits")
                        .HasForeignKey("ModuleID", "CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Target_traits__3D5E1FD2");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("TestApp.Models.Assessment", b =>
                {
                    b.Navigation("Takenassessments");
                });

            modelBuilder.Entity("TestApp.Models.Badge", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("TestApp.Models.Collaborative", b =>
                {
                    b.Navigation("LearnersCollaborations");
                });

            modelBuilder.Entity("TestApp.Models.Course", b =>
                {
                    b.Navigation("Course_enrollments");

                    b.Navigation("Modules");

                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("TestApp.Models.Discussion_forum", b =>
                {
                    b.Navigation("LearnerDiscussions");
                });

            modelBuilder.Entity("TestApp.Models.Emotional_feedback", b =>
                {
                    b.Navigation("Emotionalfeedback_reviews");
                });

            modelBuilder.Entity("TestApp.Models.Instructor", b =>
                {
                    b.Navigation("Emotionalfeedback_reviews");

                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("TestApp.Models.Leaderboard", b =>
                {
                    b.Navigation("Rankings");
                });

            modelBuilder.Entity("TestApp.Models.Learner", b =>
                {
                    b.Navigation("Achievements");

                    b.Navigation("Course_enrollments");

                    b.Navigation("Emotional_feedbacks");

                    b.Navigation("FilledSurveys");

                    b.Navigation("Interaction_logs");

                    b.Navigation("LearnerDiscussions");

                    b.Navigation("LearnersCollaborations");

                    b.Navigation("LearnersMasteries");

                    b.Navigation("LearningPreferences");

                    b.Navigation("PersonalizationProfiles");

                    b.Navigation("QuestRewards");

                    b.Navigation("Rankings");

                    b.Navigation("Skills");

                    b.Navigation("Takenassessments");
                });

            modelBuilder.Entity("TestApp.Models.Learning_activity", b =>
                {
                    b.Navigation("Emotional_feedbacks");

                    b.Navigation("Interaction_logs");
                });

            modelBuilder.Entity("TestApp.Models.Learning_path", b =>
                {
                    b.Navigation("Pathreviews");
                });

            modelBuilder.Entity("TestApp.Models.Module", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ContentLibraries");

                    b.Navigation("Discussion_forums");

                    b.Navigation("Learning_activities");

                    b.Navigation("ModuleContents");

                    b.Navigation("Target_traits");
                });

            modelBuilder.Entity("TestApp.Models.PersonalizationProfile", b =>
                {
                    b.Navigation("HealthConditions");

                    b.Navigation("Learning_paths");
                });

            modelBuilder.Entity("TestApp.Models.Quest", b =>
                {
                    b.Navigation("Collaborative");

                    b.Navigation("QuestRewards");

                    b.Navigation("Skill_Masteries");
                });

            modelBuilder.Entity("TestApp.Models.Reward", b =>
                {
                    b.Navigation("QuestRewards");
                });

            modelBuilder.Entity("TestApp.Models.Skill", b =>
                {
                    b.Navigation("SkillProgressions");
                });

            modelBuilder.Entity("TestApp.Models.Skill_Mastery", b =>
                {
                    b.Navigation("LearnersMasteries");
                });

            modelBuilder.Entity("TestApp.Models.Survey", b =>
                {
                    b.Navigation("FilledSurveys");

                    b.Navigation("SurveyQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
